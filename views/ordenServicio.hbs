{{!-- <div class="contacto"> 
        <h3 class="titulo">Enviar Correo</h3>
        <form class="formulario">
          <p class="nombre">
            <label>Nombre</label>
            <input type="text" name="nombre" required>
          </p>
          <p class="fecha">
            <label>Fecha</label>
            <input type="text" name="empresa">
          </p>
          <p class="correo">
            <label>Servicio</label>
            <input type="text" name="servicio" required>
          </p>
          <p class="telefono">
            <label>Direcci√≥n</label>
            <input type="text" name="tel√©fono" required>
          </p>
          <p class="full">
            <label>Mensaje</label>
            <textarea name="mensaje" required></textarea>
          </p>
          <p class="boton">
            <button class="btn "  >Enviar</button>
          </p>
        </form>
      </div>
    </div>
  </div>--}}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css">
<div class="errores " id="errores">
   
{{> showMessages messages}}
</div>

   <div class="formulario contact">
	<div class="row">
		<div class="col-md-3">
			<div class="contact-info">
				<img src="https://image.ibb.co/kUASdV/contact-image.png" alt="image"/>
				<h2>Orden </h2>
				<h4>{{usuario}} , haz tu solicitud de servicio aqu√≠</h4>
			</div>
		</div>
		
		<div class="col-md-9">
			<form method="POST"  action="/crear-orden">
			<div class="contact-form"  >
				<div class="form-group">
				  
				<div class="form-group">
				  <label class="control-label col-sm-2" for="servicio">Servicio:</label>
				  <div class="col-sm-10">          
					<input type="text" class="form-control" id="servicio" placeholder="Servicio" name="servicio">
				  </div>
				  <label class="control-label col-sm-2" for="fechaSolicitud">Fecha</label>
				  <div class="col-sm-10">          
					<input type="date" class="form-control" id="fechaSolicitud" placeholder="Fecha que requiere el servicio" name="fechaSolicitud">
				  </div>
				</div>
           </div>
          	
        	<div class="form-group ">
				  <label class="control-label col-sm-2" for="direccion">Direcci√≥n: </label>
				   <div class="direccion">
				  <div class="row"> 
					
				  <div class="col-sm-8">          
					<select class ="form-control" name="direccion" id="direccion">
						
						<option > Selecciona una direcci√≥n </option>
						{{#each direcciones }}
                                  <option value="{{this}}">{{this}}</option>
                         {{/each}}
					</select>
				
				  </div>
				<div class="col-sm-4" >
					 <a href="/miperfil"  class="btn2 btn-default">M√°s direcciones</a>
					 </div>
				 
					 </div>
					 </div> 
           </div>
		
				<div class="form-group">
				  <label class="control-label col-sm-2" for="comment">Descripci√≥n:</label>
				  <div class="col-sm-10">
					<textarea class="form-control" rows="5" placeholder="Descr√≠benos que trabajo necesitas para brindarte una mejor atenci√≥n" id="descripcion" name="descripcion"></textarea>
				  </div>
				</div>
				<div class="form-group">        
				  <div class="col-sm-offset-2 col-sm-10"><br>
					
	<button type="submit" class="btn2 btn-default">Enviar</button>

							  </div>
				</div>
			</div>
			
			</form>
			<div class="treat-wrapper">

  <button class="treat-button" hidden>Solicitar</button>
</div>
		</div>
		
	</div>

</div>
   



	  <script>
		  src="https://codepen.io/shshaw/pen/QmZYMG.js"
		  src="./script.js"
		 
console.clear();

let width = window.innerWidth;
let height = window.innerHeight;
const body = document.body;

const elButton = document.querySelector(".treat-button");
const elWrapper = document.querySelector(".treat-wrapper");

function getRandomArbitrary(min, max) {
  return Math.random() * (max - min) + min;
}

function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

const treatmojis = ["ü™ì", "üñåÔ∏è", "ü™ë", "üö™", "üõÅ", "‚öôÔ∏è", "üß∞", "üîß", "üî®", "üí°"];
const treats = [];
const radius = 5;

const Cd = 0.47; // Dimensionless
const rho = 1.22; // kg / m^3
const A = Math.PI * radius * radius / 10000; // m^2
const ag = 9.81; // m / s^2
const frameRate = 1 / 60;

function createTreat() /* create a treat */{
  const vx = getRandomArbitrary(-10, 10); // x velocity
  const vy = getRandomArbitrary(-10, 1); // y velocity

  const el = document.createElement("div");
  el.className = "treat";

  const inner = document.createElement("span");
  inner.className = "inner";
  inner.innerText = treatmojis[getRandomInt(0, treatmojis.length - 1)];
  el.appendChild(inner);

  elWrapper.appendChild(el);

  const rect = el.getBoundingClientRect();

  const lifetime = getRandomArbitrary(2000, 3000);

  el.style.setProperty("--lifetime", lifetime);

  const treat = {
    el,
    absolutePosition: { x: rect.left, y: rect.top },
    position: { x: rect.left, y: rect.top },
    velocity: { x: vx, y: vy },
    mass: 0.1, //kg
    radius: el.offsetWidth, // 1px = 1cm
    restitution: -.7,

    lifetime,
    direction: vx > 0 ? 1 : -1,

    animating: true,

    remove() {
      this.animating = false;
      this.el.parentNode.removeChild(this.el);
    },

    animate() {
      const treat = this;
      let Fx =
      -0.5 *
      Cd *
      A *
      rho *
      treat.velocity.x *
      treat.velocity.x *
      treat.velocity.x /
      Math.abs(treat.velocity.x);
      let Fy =
      -0.5 *
      Cd *
      A *
      rho *
      treat.velocity.y *
      treat.velocity.y *
      treat.velocity.y /
      Math.abs(treat.velocity.y);

      Fx = isNaN(Fx) ? 0 : Fx;
      Fy = isNaN(Fy) ? 0 : Fy;

      // Calculate acceleration ( F = ma )
      var ax = Fx / treat.mass;
      var ay = ag + Fy / treat.mass;
      // Integrate to get velocity
      treat.velocity.x += ax * frameRate;
      treat.velocity.y += ay * frameRate;

      // Integrate to get position
      treat.position.x += treat.velocity.x * frameRate * 100;
      treat.position.y += treat.velocity.y * frameRate * 100;

      treat.checkBounds();
      treat.update();
    },

    checkBounds() {

      if (treat.position.y > height - treat.radius) {
        treat.velocity.y *= treat.restitution;
        treat.position.y = height - treat.radius;
      }
      if (treat.position.x > width - treat.radius) {
        treat.velocity.x *= treat.restitution;
        treat.position.x = width - treat.radius;
        treat.direction = -1;
      }
      if (treat.position.x < treat.radius) {
        treat.velocity.x *= treat.restitution;
        treat.position.x = treat.radius;
        treat.direction = 1;
      }

    },

    update() {
      const relX = this.position.x - this.absolutePosition.x;
      const relY = this.position.y - this.absolutePosition.y;

      this.el.style.setProperty("--x", relX);
      this.el.style.setProperty("--y", relY);
      this.el.style.setProperty("--direction", this.direction);
    } };


  setTimeout(() => {
    treat.remove();
  }, lifetime);

  return treat;
}


function animationLoop() {
  var i = treats.length;
  while (i--) {
    treats[i].animate();

    if (!treats[i].animating) {
      treats.splice(i, 1);
    }
  }

  requestAnimationFrame(animationLoop);
}

animationLoop();

function addTreats() {
  //cancelAnimationFrame(frame);
  if (treats.length > 40) {
    return;
  }
  for (let i = 0; i < 10; i++) {
    treats.push(createTreat());
  }
}

elButton.addEventListener("click", addTreats);
elButton.click();

window.addEventListener("resize", () => {
  width = window.innerWidth;
  height = window.innerHeight;
});



	  </script>